{
  "version": 3,
  "sources": ["../../graphology-layout-noverlap/iterate.js", "../../graphology-layout-noverlap/helpers.js", "../../graphology-layout-noverlap/defaults.js", "../../graphology-layout-noverlap/index.js"],
  "sourcesContent": ["/**\n * Graphology Noverlap Iteration\n * ==============================\n *\n * Function used to perform a single iteration of the algorithm.\n */\n\n/**\n * Matrices properties accessors.\n */\nvar NODE_X = 0,\n  NODE_Y = 1,\n  NODE_SIZE = 2;\n\n/**\n * Constants.\n */\nvar PPN = 3;\n\n/**\n * Helpers.\n */\nfunction hashPair(a, b) {\n  return a + 'ยง' + b;\n}\n\nfunction jitter() {\n  return 0.01 * (0.5 - Math.random());\n}\n\n/**\n * Function used to perform a single interation of the algorithm.\n *\n * @param  {object}       options    - Layout options.\n * @param  {Float32Array} NodeMatrix - Node data.\n * @return {object}                  - Some metadata.\n */\nmodule.exports = function iterate(options, NodeMatrix) {\n  // Caching options\n  var margin = options.margin;\n  var ratio = options.ratio;\n  var expansion = options.expansion;\n  var gridSize = options.gridSize; // TODO: decrease grid size when few nodes?\n  var speed = options.speed;\n\n  // Generic iteration variables\n  var i, j, x, y, l, size;\n  var converged = true;\n\n  var length = NodeMatrix.length;\n  var order = (length / PPN) | 0;\n\n  var deltaX = new Float32Array(order);\n  var deltaY = new Float32Array(order);\n\n  // Finding the extents of our space\n  var xMin = Infinity;\n  var yMin = Infinity;\n  var xMax = -Infinity;\n  var yMax = -Infinity;\n\n  for (i = 0; i < length; i += PPN) {\n    x = NodeMatrix[i + NODE_X];\n    y = NodeMatrix[i + NODE_Y];\n    size = NodeMatrix[i + NODE_SIZE] * ratio + margin;\n\n    xMin = Math.min(xMin, x - size);\n    xMax = Math.max(xMax, x + size);\n    yMin = Math.min(yMin, y - size);\n    yMax = Math.max(yMax, y + size);\n  }\n\n  var width = xMax - xMin;\n  var height = yMax - yMin;\n  var xCenter = (xMin + xMax) / 2;\n  var yCenter = (yMin + yMax) / 2;\n\n  xMin = xCenter - (expansion * width) / 2;\n  xMax = xCenter + (expansion * width) / 2;\n  yMin = yCenter - (expansion * height) / 2;\n  yMax = yCenter + (expansion * height) / 2;\n\n  // Building grid\n  var grid = new Array(gridSize * gridSize),\n    gridLength = grid.length,\n    c;\n\n  for (c = 0; c < gridLength; c++) grid[c] = [];\n\n  var nxMin, nxMax, nyMin, nyMax;\n  var xMinBox, xMaxBox, yMinBox, yMaxBox;\n\n  var col, row;\n\n  for (i = 0; i < length; i += PPN) {\n    x = NodeMatrix[i + NODE_X];\n    y = NodeMatrix[i + NODE_Y];\n    size = NodeMatrix[i + NODE_SIZE] * ratio + margin;\n\n    nxMin = x - size;\n    nxMax = x + size;\n    nyMin = y - size;\n    nyMax = y + size;\n\n    xMinBox = Math.floor((gridSize * (nxMin - xMin)) / (xMax - xMin));\n    xMaxBox = Math.floor((gridSize * (nxMax - xMin)) / (xMax - xMin));\n    yMinBox = Math.floor((gridSize * (nyMin - yMin)) / (yMax - yMin));\n    yMaxBox = Math.floor((gridSize * (nyMax - yMin)) / (yMax - yMin));\n\n    for (col = xMinBox; col <= xMaxBox; col++) {\n      for (row = yMinBox; row <= yMaxBox; row++) {\n        grid[col * gridSize + row].push(i);\n      }\n    }\n  }\n\n  // Computing collisions\n  var cell;\n\n  var collisions = new Set();\n\n  var n1, n2, x1, x2, y1, y2, s1, s2, h;\n\n  var xDist, yDist, dist, collision;\n\n  for (c = 0; c < gridLength; c++) {\n    cell = grid[c];\n\n    for (i = 0, l = cell.length; i < l; i++) {\n      n1 = cell[i];\n\n      x1 = NodeMatrix[n1 + NODE_X];\n      y1 = NodeMatrix[n1 + NODE_Y];\n      s1 = NodeMatrix[n1 + NODE_SIZE];\n\n      for (j = i + 1; j < l; j++) {\n        n2 = cell[j];\n        h = hashPair(n1, n2);\n\n        if (gridLength > 1 && collisions.has(h)) continue;\n\n        if (gridLength > 1) collisions.add(h);\n\n        x2 = NodeMatrix[n2 + NODE_X];\n        y2 = NodeMatrix[n2 + NODE_Y];\n        s2 = NodeMatrix[n2 + NODE_SIZE];\n\n        xDist = x2 - x1;\n        yDist = y2 - y1;\n        dist = Math.sqrt(xDist * xDist + yDist * yDist);\n        collision = dist < s1 * ratio + margin + (s2 * ratio + margin);\n\n        if (collision) {\n          converged = false;\n\n          n2 = (n2 / PPN) | 0;\n\n          if (dist > 0) {\n            deltaX[n2] += (xDist / dist) * (1 + s1);\n            deltaY[n2] += (yDist / dist) * (1 + s1);\n          } else {\n            // Nodes are on the exact same spot, we need to jitter a bit\n            deltaX[n2] += width * jitter();\n            deltaY[n2] += height * jitter();\n          }\n        }\n      }\n    }\n  }\n\n  for (i = 0, j = 0; i < length; i += PPN, j++) {\n    NodeMatrix[i + NODE_X] += deltaX[j] * 0.1 * speed;\n    NodeMatrix[i + NODE_Y] += deltaY[j] * 0.1 * speed;\n  }\n\n  return {converged: converged};\n};\n", "/**\n * Graphology Noverlap Helpers\n * ============================\n *\n * Miscellaneous helper functions.\n */\n\n/**\n * Constants.\n */\nvar PPN = 3;\n\n/**\n * Function used to validate the given settings.\n *\n * @param  {object}      settings - Settings to validate.\n * @return {object|null}\n */\nexports.validateSettings = function (settings) {\n  if (\n    ('gridSize' in settings && typeof settings.gridSize !== 'number') ||\n    settings.gridSize <= 0\n  )\n    return {message: 'the `gridSize` setting should be a positive number.'};\n\n  if (\n    ('margin' in settings && typeof settings.margin !== 'number') ||\n    settings.margin < 0\n  )\n    return {\n      message: 'the `margin` setting should be 0 or a positive number.'\n    };\n\n  if (\n    ('expansion' in settings && typeof settings.expansion !== 'number') ||\n    settings.expansion <= 0\n  )\n    return {message: 'the `expansion` setting should be a positive number.'};\n\n  if (\n    ('ratio' in settings && typeof settings.ratio !== 'number') ||\n    settings.ratio <= 0\n  )\n    return {message: 'the `ratio` setting should be a positive number.'};\n\n  if (\n    ('speed' in settings && typeof settings.speed !== 'number') ||\n    settings.speed <= 0\n  )\n    return {message: 'the `speed` setting should be a positive number.'};\n\n  return null;\n};\n\n/**\n * Function generating a flat matrix for the given graph's nodes.\n *\n * @param  {Graph}        graph   - Target graph.\n * @param  {function}     reducer - Node reducer function.\n * @return {Float32Array}         - The node matrix.\n */\nexports.graphToByteArray = function (graph, reducer) {\n  var order = graph.order;\n\n  var matrix = new Float32Array(order * PPN);\n\n  var j = 0;\n\n  graph.forEachNode(function (node, attr) {\n    if (typeof reducer === 'function') attr = reducer(node, attr);\n\n    matrix[j] = attr.x;\n    matrix[j + 1] = attr.y;\n    matrix[j + 2] = attr.size || 1;\n    j += PPN;\n  });\n\n  return matrix;\n};\n\n/**\n * Function applying the layout back to the graph.\n *\n * @param {Graph}        graph      - Target graph.\n * @param {Float32Array} NodeMatrix - Node matrix.\n * @param {function}     reducer    - Reducing function.\n */\nexports.assignLayoutChanges = function (graph, NodeMatrix, reducer) {\n  var i = 0;\n\n  graph.forEachNode(function (node) {\n    var pos = {\n      x: NodeMatrix[i],\n      y: NodeMatrix[i + 1]\n    };\n\n    if (typeof reducer === 'function') pos = reducer(node, pos);\n\n    graph.mergeNodeAttributes(node, pos);\n\n    i += PPN;\n  });\n};\n\n/**\n * Function collecting the layout positions.\n *\n * @param  {Graph}        graph      - Target graph.\n * @param  {Float32Array} NodeMatrix - Node matrix.\n * @param  {function}     reducer    - Reducing function.\n * @return {object}                  - Map to node positions.\n */\nexports.collectLayoutChanges = function (graph, NodeMatrix, reducer) {\n  var positions = {};\n\n  var i = 0;\n\n  graph.forEachNode(function (node) {\n    var pos = {\n      x: NodeMatrix[i],\n      y: NodeMatrix[i + 1]\n    };\n\n    if (typeof reducer === 'function') pos = reducer(node, pos);\n\n    positions[node] = pos;\n\n    i += PPN;\n  });\n\n  return positions;\n};\n\n/**\n * Function returning a web worker from the given function.\n *\n * @param  {function}  fn - Function for the worker.\n * @return {DOMString}\n */\nexports.createWorker = function createWorker(fn) {\n  var xURL = window.URL || window.webkitURL;\n  var code = fn.toString();\n  var objectUrl = xURL.createObjectURL(\n    new Blob(['(' + code + ').call(this);'], {type: 'text/javascript'})\n  );\n  var worker = new Worker(objectUrl);\n  xURL.revokeObjectURL(objectUrl);\n\n  return worker;\n};\n", "/**\n * Graphology Noverlap Layout Default Settings\n * ============================================\n */\nmodule.exports = {\n  gridSize: 20,\n  margin: 5,\n  expansion: 1.1,\n  ratio: 1.0,\n  speed: 3\n};\n", "/**\n * Graphology Noverlap Layout\n * ===========================\n *\n * Library endpoint.\n */\nvar isGraph = require('graphology-utils/is-graph');\nvar iterate = require('./iterate.js');\nvar helpers = require('./helpers.js');\n\nvar DEFAULT_SETTINGS = require('./defaults.js');\nvar DEFAULT_MAX_ITERATIONS = 500;\n\n/**\n * Asbtract function used to run a certain number of iterations.\n *\n * @param  {boolean}       assign       - Whether to assign positions.\n * @param  {Graph}         graph        - Target graph.\n * @param  {object|number} params       - If number, params.maxIterations, else:\n * @param  {number}          maxIterations - Maximum number of iterations.\n * @param  {object}          [settings] - Settings.\n * @return {object|undefined}\n */\nfunction abstractSynchronousLayout(assign, graph, params) {\n  if (!isGraph(graph))\n    throw new Error(\n      'graphology-layout-noverlap: the given graph is not a valid graphology instance.'\n    );\n\n  if (typeof params === 'number') params = {maxIterations: params};\n  else params = params || {};\n\n  var maxIterations = params.maxIterations || DEFAULT_MAX_ITERATIONS;\n\n  if (typeof maxIterations !== 'number' || maxIterations <= 0)\n    throw new Error(\n      'graphology-layout-force: you should provide a positive number of maximum iterations.'\n    );\n\n  // Validating settings\n  var settings = Object.assign({}, DEFAULT_SETTINGS, params.settings),\n    validationError = helpers.validateSettings(settings);\n\n  if (validationError)\n    throw new Error('graphology-layout-noverlap: ' + validationError.message);\n\n  // Building matrices\n  var matrix = helpers.graphToByteArray(graph, params.inputReducer),\n    converged = false,\n    i;\n\n  // Iterating\n  for (i = 0; i < maxIterations && !converged; i++)\n    converged = iterate(settings, matrix).converged;\n\n  // Applying\n  if (assign) {\n    helpers.assignLayoutChanges(graph, matrix, params.outputReducer);\n    return;\n  }\n\n  return helpers.collectLayoutChanges(graph, matrix, params.outputReducer);\n}\n\n/**\n * Exporting.\n */\nvar synchronousLayout = abstractSynchronousLayout.bind(null, false);\nsynchronousLayout.assign = abstractSynchronousLayout.bind(null, true);\n\nmodule.exports = synchronousLayout;\n"],
  "mappings": "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",
  "names": []
}
